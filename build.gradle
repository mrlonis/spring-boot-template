plugins {
	id "java"
	id "idea"
	id "jacoco"
	id "org.springframework.boot" version "2.2.13.RELEASE"
	id "io.spring.dependency-management" version "1.0.11.RELEASE"
	id "io.freefair.lombok" version "5.3.0"
}

group = "com.mrlonis"
version = "0.0.1-SNAPSHOT"
archivesBaseName = "spring-boot-template"
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR10"
		mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:3.1.6.RELEASE"
		mavenBom "org.springframework.boot:spring-boot-dependencies:2.2.13.RELEASE"
	}
}

dependencies {
	implementation "io.springfox:springfox-boot-starter:3.0.0"
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-web"

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	testImplementation "org.springframework.boot:spring-boot-starter-test"
}

compileJava {
	options.deprecation = true
	options.warnings = true
	options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
	options.deprecation = true
	options.warnings = true
	options.compilerArgs << "-Xlint:unchecked"
}

jacoco {
	toolVersion = "0.8.5"
}
def filesToExcludeFromCoverage = ["**/com/mrlonis/configuration/**",
								  "**/com/mrlonis/controller/filters/**",
								  "**/com/mrlonis/dto/**",
								  "**/com/mrlonis/interfaces/**",
								  "**/com/mrlonis/SpringBootTemplateApplication.*"]

test {
	finalizedBy jacocoTestReport
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		csv.enabled false
	}

	afterEvaluate {
		classDirectories.from = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: filesToExcludeFromCoverage)
		})
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.from = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: filesToExcludeFromCoverage)
		})
	}

	violationRules {
		rule {
			limit {
				minimum = 1.00
			}
		}
		rule {
			limit {
				counter = "BRANCH"
				value = "COVEREDRATIO"
				minimum = 1.00
			}
		}
	}

	mustRunAfter jacocoTestReport
}

check {
	dependsOn jacocoTestCoverageVerification
}

bootRun {
	systemProperties = System.properties as Map<String, ?>
}

build {
	dependsOn jacocoTestReport
}